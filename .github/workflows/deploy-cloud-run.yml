name: Deploy Gmail Watch Renewal System

on:
  push:
    branches: [main]
    paths: ['functions/**']
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_ACCOUNT: dev-talentino-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com
  TOPIC_ID: ${{ secrets.GCP_PUB_SUB_GMAIL_WATCH_RENEWAL_TOPIC_ID }}

jobs:
  deploy-gmail-renewal-system:
    name: Deploy Gmail Watch Renewal System
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: latest

      - name: Verify Project Configuration
        run: |
          echo "Project ID: $PROJECT_ID"
          echo "Region: $REGION"
          echo "Service Account: $SERVICE_ACCOUNT"
          gcloud config set project $PROJECT_ID

      - name: Verify Directory Structure
        run: |
          echo "Current directory structure:"
          find . -type d -name "*function*" 2>/dev/null || echo "No function directories found"
          ls -la functions/ 2>/dev/null || echo "Creating functions directory..."
          mkdir -p functions/coordinator functions/worker

      - name: Create Pub/Sub Topic (if not exists)
        run: |
          gcloud pubsub topics describe $TOPIC_ID || \
          gcloud pubsub topics create $TOPIC_ID
          echo "‚úÖ Pub/Sub topic ready: $TOPIC_ID"

      - name: Deploy Coordinator Function
        run: |
          echo "üöÄ Deploying Coordinator Function..."
          gcloud run deploy gmail-coordinator \
            --source=./functions/coordinator \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated \
            --service-account=$SERVICE_ACCOUNT \
            --memory=512Mi \
            --cpu=1 \
            --timeout=300s \
            --max-instances=5 \
            --min-instances=0 \
            --set-env-vars="PROJECT_ID=$PROJECT_ID,TOPIC_ID=$TOPIC_ID,DATABASE_URL=${{ secrets.DATABASE_URL }}"
          
          echo "‚úÖ Coordinator deployed successfully"

      - name: Deploy Worker Function  
        run: |
          echo "üöÄ Deploying Worker Function..."
          gcloud run deploy gmail-worker \
            --source=./functions/worker \
            --region=$REGION \
            --platform=managed \
            --no-allow-unauthenticated \
            --service-account=$SERVICE_ACCOUNT \
            --memory=1Gi \
            --cpu=1 \
            --timeout=540s \
            --max-instances=50 \
            --min-instances=0 \
            --set-env-vars="PROJECT_ID=$PROJECT_ID,DATABASE_URL=${{ secrets.DATABASE_URL }}"
          
          echo "‚úÖ Worker deployed successfully"

      - name: Get Worker Service URL
        id: get-worker-url
        run: |
          WORKER_URL=$(gcloud run services describe gmail-worker \
            --region=$REGION \
            --format='value(status.url)')
          echo "worker_url=$WORKER_URL" >> $GITHUB_OUTPUT
          echo "Worker URL: $WORKER_URL"

      - name: Setup Pub/Sub Push Subscription
        run: |
          echo "üîó Setting up Pub/Sub subscription..."
          
          # Delete existing subscription if it exists
          gcloud pubsub subscriptions delete gmail-worker-subscription \
            --quiet 2>/dev/null || echo "No existing subscription to delete"
          
          # Create new push subscription
          gcloud pubsub subscriptions create gmail-worker-subscription \
            --topic=$TOPIC_ID \
            --push-endpoint="${{ steps.get-worker-url.outputs.worker_url }}/" \
            --ack-deadline=600 \
            --max-delivery-attempts=5 \
            --min-retry-delay=10s \
            --max-retry-delay=300s
          
          echo "‚úÖ Pub/Sub subscription created successfully"

      - name: Get Coordinator Service URL
        id: get-coordinator-url
        run: |
          COORDINATOR_URL=$(gcloud run services describe gmail-coordinator \
            --region=$REGION \
            --format='value(status.url)')
          echo "coordinator_url=$COORDINATOR_URL" >> $GITHUB_OUTPUT
          echo "üìã Coordinator URL: $COORDINATOR_URL"

      - name: Verify Deployment Health
        run: |
          echo "üîç Verifying deployment health..."
          
          # Check if services are ready
          gcloud run services describe gmail-coordinator --region=$REGION \
            --format='value(status.conditions[0].status)' | grep True
          
          gcloud run services describe gmail-worker --region=$REGION \
            --format='value(status.conditions[0].status)' | grep True
          
          # Verify Pub/Sub subscription
          gcloud pubsub subscriptions describe gmail-worker-subscription \
            --format='value(name)'
          
          echo "‚úÖ All services deployed and healthy!"

      - name: Deployment Summary
        run: |
          echo "üìä DEPLOYMENT SUMMARY"
          echo "===================="
          echo "‚úÖ Coordinator URL: ${{ steps.get-coordinator-url.outputs.coordinator_url }}"
          echo "‚úÖ Worker URL: ${{ steps.get-worker-url.outputs.worker_url }}"
          echo "‚úÖ Pub/Sub Topic: $TOPIC_ID"
          echo "‚úÖ Pub/Sub Subscription: gmail-worker-subscription"
          echo "‚úÖ Region: $REGION"
          echo "‚úÖ Service Account: $SERVICE_ACCOUNT"
          echo ""
          echo "üéØ Next steps:"
          echo "1. Create Cloud Scheduler job to trigger: ${{ steps.get-coordinator-url.outputs.coordinator_url }}"
          echo "2. Set up your database with gmail_watches collection"
          echo "3. Configure Gmail API credentials in your service account"